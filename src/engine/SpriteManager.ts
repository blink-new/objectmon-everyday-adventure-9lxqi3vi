// Sprite Manager for ObjectMon
// Handles sprite generation and rendering

import { PALETTE } from './GameEngine';

export interface SpriteData {
  pixels: number[][];
  width: number;
  height: number;
  frames?: number[][][];
}

export class SpriteManager {
  private sprites: Map<string, SpriteData> = new Map();
  private spriteCanvas: HTMLCanvasElement;
  private spriteCtx: CanvasRenderingContext2D;

  constructor() {
    this.spriteCanvas = document.createElement('canvas');
    this.spriteCtx = this.spriteCanvas.getContext('2d')!;
    this.spriteCtx.imageSmoothingEnabled = false;
    
    // Generate base sprites
    this.generateBaseSprites();
  }

  private generateBaseSprites() {
    // Player sprite (16x16)
    this.sprites.set('player', {
      width: 16,
      height: 16,
      pixels: [
        [0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0],
        [0,0,0,1,1,3,3,3,3,3,3,1,1,0,0,0],
        [0,0,1,3,3,2,2,2,2,2,2,3,3,1,0,0],
        [0,0,1,3,2,2,1,2,2,1,2,2,3,1,0,0],
        [0,0,1,3,2,2,2,2,2,2,2,2,3,1,0,0],
        [0,0,1,3,2,2,3,3,3,3,2,2,3,1,0,0],
        [0,0,0,1,3,2,2,2,2,2,2,3,1,0,0,0],
        [0,0,0,0,1,3,3,3,3,3,3,1,0,0,0,0],
        [0,0,0,1,3,3,3,3,3,3,3,3,1,0,0,0],
        [0,0,1,3,3,3,3,3,3,3,3,3,3,1,0,0],
        [0,0,1,3,3,3,3,3,3,3,3,3,3,1,0,0],
        [0,0,1,3,3,3,3,3,3,3,3,3,3,1,0,0],
        [0,0,0,1,3,3,3,3,3,3,3,3,1,0,0,0],
        [0,0,0,0,1,1,3,3,3,3,1,1,0,0,0,0],
        [0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0],
        [0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0]
      ]
    });

    // NPC sprite (16x16)
    this.sprites.set('npc', {
      width: 16,
      height: 16,
      pixels: [
        [0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0],
        [0,0,0,1,1,2,2,2,2,2,2,1,1,0,0,0],
        [0,0,1,2,2,2,2,2,2,2,2,2,2,1,0,0],
        [0,0,1,2,2,1,1,2,2,1,1,2,2,1,0,0],
        [0,0,1,2,2,2,2,2,2,2,2,2,2,1,0,0],
        [0,0,1,2,2,2,2,1,1,2,2,2,2,1,0,0],
        [0,0,0,1,2,2,2,2,2,2,2,2,1,0,0,0],
        [0,0,0,0,1,2,2,2,2,2,2,1,0,0,0,0],
        [0,0,0,1,2,2,2,2,2,2,2,2,1,0,0,0],
        [0,0,1,2,2,2,2,2,2,2,2,2,2,1,0,0],
        [0,0,1,2,2,2,2,2,2,2,2,2,2,1,0,0],
        [0,0,1,2,2,2,2,2,2,2,2,2,2,1,0,0],
        [0,0,0,1,2,2,2,2,2,2,2,2,1,0,0,0],
        [0,0,0,0,1,1,2,2,2,2,1,1,0,0,0,0],
        [0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0],
        [0,0,0,0,0,1,0,1,1,0,1,0,0,0,0,0]
      ]
    });

    // Toaster ObjectMon sprite (16x16)
    this.sprites.set('toaster', {
      width: 16,
      height: 16,
      pixels: [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0],
        [0,0,1,2,2,2,2,2,2,2,2,2,2,1,0,0],
        [0,1,2,2,3,3,2,2,2,2,3,3,2,2,1,0],
        [0,1,2,3,1,1,3,2,2,3,1,1,3,2,1,0],
        [0,1,2,3,1,1,3,2,2,3,1,1,3,2,1,0],
        [0,1,2,2,3,3,2,2,2,2,3,3,2,2,1,0],
        [0,1,2,2,2,2,2,2,2,2,2,2,2,2,1,0],
        [0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],
        [0,1,2,2,2,2,2,2,2,2,2,2,2,2,1,0],
        [0,1,2,2,2,2,2,2,2,2,2,2,2,2,1,0],
        [0,1,2,2,1,1,1,1,1,1,1,1,2,2,1,0],
        [0,1,2,2,2,2,2,2,2,2,2,2,2,2,1,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
    });

    // Pencil ObjectMon sprite (16x16)
    this.sprites.set('pencil', {
      width: 16,
      height: 16,
      pixels: [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,1,3,3,1,0,0],
        [0,0,0,0,0,0,0,0,0,1,2,3,3,1,0,0],
        [0,0,0,0,0,0,0,0,1,2,2,3,1,0,0,0],
        [0,0,0,0,0,0,0,1,2,2,2,1,0,0,0,0],
        [0,0,0,0,0,0,1,2,2,2,1,0,0,0,0,0],
        [0,0,0,0,0,1,2,2,2,1,0,0,0,0,0,0],
        [0,0,0,0,1,2,2,2,1,0,0,0,0,0,0,0],
        [0,0,0,1,2,2,2,1,0,0,0,0,0,0,0,0],
        [0,0,1,2,2,2,1,0,0,0,0,0,0,0,0,0],
        [0,1,2,2,2,1,0,0,0,0,0,0,0,0,0,0],
        [0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0],
        [0,1,3,3,1,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
    });

    // Mug ObjectMon sprite (16x16)  
    this.sprites.set('mug', {
      width: 16,
      height: 16,
      pixels: [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0],
        [0,0,1,2,2,2,2,2,2,2,2,1,0,0,0,0],
        [0,0,1,2,2,2,2,2,2,2,2,1,0,0,0,0],
        [0,0,1,2,2,3,3,3,3,2,2,1,1,1,0,0],
        [0,0,1,2,3,3,3,3,3,3,2,1,2,2,1,0],
        [0,0,1,2,3,3,3,3,3,3,2,1,2,2,1,0],
        [0,0,1,2,3,3,3,3,3,3,2,1,2,2,1,0],
        [0,0,1,2,3,3,3,3,3,3,2,1,2,2,1,0],
        [0,0,1,2,2,3,3,3,3,2,2,1,1,1,0,0],
        [0,0,1,2,2,2,2,2,2,2,2,1,0,0,0,0],
        [0,0,1,2,2,2,2,2,2,2,2,1,0,0,0,0],
        [0,0,0,1,2,2,2,2,2,2,1,0,0,0,0,0],
        [0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
    });

    // Tree tile sprite (16x16)
    this.sprites.set('tree', {
      width: 16,
      height: 16,
      pixels: [
        [0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0],
        [0,0,0,1,1,3,3,3,3,3,3,1,1,0,0,0],
        [0,0,1,3,3,3,3,3,3,3,3,3,3,1,0,0],
        [0,1,3,3,3,2,3,3,3,3,2,3,3,3,1,0],
        [0,1,3,3,3,3,3,3,3,3,3,3,3,3,1,0],
        [1,3,3,3,3,3,3,2,3,3,3,3,3,3,3,1],
        [1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1],
        [1,3,3,3,2,3,3,3,3,3,2,3,3,3,3,1],
        [0,1,3,3,3,3,3,3,3,3,3,3,3,3,1,0],
        [0,0,1,3,3,3,3,3,3,3,3,3,3,1,0,0],
        [0,0,0,1,1,3,3,3,3,3,3,1,1,0,0,0],
        [0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0],
        [0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,1,3,3,1,0,0,0,0,0,0],
        [0,0,0,0,0,0,1,3,3,1,0,0,0,0,0,0],
        [0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0]
      ]
    });

    // Tall grass sprite (16x16)
    this.sprites.set('tallgrass', {
      width: 16,
      height: 16,
      pixels: [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
        [0,0,0,0,0,2,0,0,0,0,2,0,0,0,0,0],
        [0,0,0,0,2,3,2,0,0,2,3,2,0,0,0,0],
        [0,0,0,2,3,3,3,2,2,3,3,3,2,0,0,0],
        [0,0,2,3,3,3,3,3,3,3,3,3,3,2,0,0],
        [0,2,3,3,3,3,3,3,3,3,3,3,3,3,2,0],
        [0,2,3,3,3,3,3,3,3,3,3,3,3,3,2,0],
        [2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2],
        [2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2],
        [2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2],
        [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
      ]
    });

    // Water animated sprite (16x16, 4 frames)
    const waterBase = [
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
      [0,1,1,2,2,1,1,2,2,1,1,2,2,1,1,0],
      [0,1,2,2,2,2,1,2,2,2,1,2,2,2,1,0],
      [0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0],
      [0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0],
      [0,1,2,2,2,2,1,2,2,2,1,2,2,2,1,0],
      [0,1,1,2,2,1,1,2,2,1,1,2,2,1,1,0],
      [0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0],
      [0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0],
      [0,1,2,2,2,2,1,2,2,2,1,2,2,2,1,0],
      [0,1,1,2,2,1,1,2,2,1,1,2,2,1,1,0],
      [0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0],
      [0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0],
      [0,1,2,2,2,2,1,2,2,2,1,2,2,2,1,0],
      [0,1,1,2,2,1,1,2,2,1,1,2,2,1,1,0],
      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    ];

    this.sprites.set('water', {
      width: 16,
      height: 16,
      pixels: waterBase,
      frames: [
        waterBase,
        this.shiftPattern(waterBase, 1),
        this.shiftPattern(waterBase, 2),
        this.shiftPattern(waterBase, 3)
      ]
    });
  }

  private shiftPattern(pixels: number[][], offset: number): number[][] {
    const shifted = pixels.map(row => [...row]);
    // Simple pattern shift for water animation
    for (let y = 1; y < 15; y++) {
      for (let x = 1; x < 15; x++) {
        if (pixels[y][x] === 1) {
          shifted[y][(x + offset) % 14 + 1] = 1;
          shifted[y][x] = 2;
        }
      }
    }
    return shifted;
  }

  public drawSprite(
    ctx: CanvasRenderingContext2D, 
    spriteName: string, 
    x: number, 
    y: number, 
    scale: number = 1,
    frame: number = 0
  ) {
    const sprite = this.sprites.get(spriteName);
    if (!sprite) return;

    const pixels = sprite.frames ? sprite.frames[frame] : sprite.pixels;
    const colors = ['transparent', PALETTE.darkest, PALETTE.dark, PALETTE.light, PALETTE.lightest];

    for (let py = 0; py < sprite.height; py++) {
      for (let px = 0; px < sprite.width; px++) {
        const colorIndex = pixels[py][px];
        if (colorIndex > 0) {
          ctx.fillStyle = colors[colorIndex];
          ctx.fillRect(
            x + px * scale,
            y + py * scale,
            scale,
            scale
          );
        }
      }
    }
  }

  public getSpriteData(name: string): SpriteData | undefined {
    return this.sprites.get(name);
  }
}